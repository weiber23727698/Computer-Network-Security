from Crypto.Util.number import bytes_to_long, long_to_bytes
import argparse
from pwn import *


parser = argparse.ArgumentParser(description="P13 ~ 16")
parser.add_argument("--problem", default = 'a')
args = parser.parse_args()

P = 229427426007004641058038399605893431891338652544880488643534649263550827812892013492489412406570250351976852154191427816707204012255764549959937503449437748973977415513106105897497757095728051081468939079966553921958218909428521019515171147734090784426719929697847543345936614548176336768375245642108499733879

def a():
    cipher1 = (150193047667909837766111280031869142718827058769201717285047562407453603883855530251776017805206992092757554389306679493442908003744390429019858942737941199712229990951724908915604365134251617193985701161461065615360720089777792607734189617666426951066358845592816610219910382311366796017269644651584866440918, 
            144792518086735242120216394886003830494407191551576872534764233874250105270851361722133224512636314674136343915660560288995888698765991530795796895797412544861115438526441773258575365519638231160923628794691834237763761036362164801146099752600057816047781043152468195732554663564109003163997528879822117140046)
    cipher2 = (150193047667909837766111280031869142718827058769201717285047562407453603883855530251776017805206992092757554389306679493442908003744390429019858942737941199712229990951724908915604365134251617193985701161461065615360720089777792607734189617666426951066358845592816610219910382311366796017269644651584866440918, 
            168246766405656159564980788312255750412300108616516432698923057650648128444401587815974789482221812291728898024542962919124851271441427793097050999684892045950235217728523841283247500887346711552605830147315859023688554705330921120411566061562405225701635928273359673479873642485906930541608322791903915259912)
    message = "85243".encode()
    message = bytes_to_long(message)
    print(long_to_bytes((cipher1[1]*pow(cipher2[1], -1, P)%P)*message % P))

def c():
    partial = dict()
    r = remote('cns.csie.org', 6003)
    r.recvuntil('cipher = ')
    # c1, c2
    cipher = f"{r.recvline()}"[3:-4]
    cipher = cipher.split(',')
    # partial
    for i in range(1, 6):
        r.sendlineafter('Do you want to decrypt something? (y/n): ', "y")
        r.sendlineafter('Give me your c1: ', f"{int(cipher[0])}")
        r.sendlineafter('Which key do you wnat to use? (1~5): ', f"{i}")
        partial[i] = f"{r.recvline()}"[2:-3]
        partial[i] = int(partial[i])
    r.sendlineafter('Do you want to decrypt something? (y/n): ', "n")
    co = [None] * 6
    for i in range(1, 6):
        L = 1
        for j in range(1, 6):
            if i == j:
                continue
            L *= ((j)/(j-i))
        co[i] = int(L)
    key = 1
    for i in range(1, 6):
        key *= pow(partial[i], co[i], P)
    pt = (pow(key, -1, P) * int(cipher[1])) % P
    message = long_to_bytes(pt)
    print(message)




if args.problem == "a":
    a()
elif args.problem == "c":
    c()





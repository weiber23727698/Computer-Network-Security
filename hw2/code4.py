from Crypto.PublicKey import RSA

N="00b4f98200f1309e8a486824051051ac80790f8e66dac4744e2ce5134fb432121f41c5471e3459d01e56e64befd2034c65eb300ebf0045342221bff206b6cdda7f3349c17b08563a576731f95a64e2f00af70b5cbb2f4f388d49ce82da76ca609a6ec1529f29b0fa0bedc5764b86472e2c5ac5198cedb6f5e1e8e0ca950ea11bc4cf5e5a0497db3ad96f5a745cf902d56be394a259068fe198bc9de8fe8d034a71013f46c2ac72451211eb1127286c19467eaf3a10049942d46b0f49f3c51c01c06a2f8c94416cc1aadaeb191de959f0241ce8f32575c848bd2f4f8f84dab46e2aa7ad45de1c6060fbbee9668f8e9cb6d366b8cd6ce99f78bbef145f2b7b7e5222f762ccb95f17b1538260c2ea45571061b0d873fbe60d61dd87aa4833ac71b802f2b91d30f38e30ae9da39fbd1c53e80496f511521285b3bb1da3dc79931463d278d1fe28a77880a9f2368029c4cefffebbbd6904f85291b3606d0b5ed3efd8c1ee14538dc051274665f4b0f55d6c6e12d2cb728ac15f7a6572b71a5bd6fa01bddb0af211091bff4c8ec7e93efae4654b2abae09e35be29afbfc3f4df8e4348c525b9d8662a1ac344dadb15b953905f639b48fec7cfcfdf27cc0ad82b936d5efe7c0d891bf9752d3fb0857d38337df033e4b681d19ec8603535504d05a421036c077694482eee919a44b3296e2a4c272cbf7bbf14b6d62eb194e4ee83ba227fed"
N = int.from_bytes(bytes.fromhex(N), "big")
e = 65537
# reference: https://www.alpertron.com.ar/ECM.HTM?fbclid=IwAR1XpZX3O7-bIT0Q7hbE8aLeif0vOh1a-i4Rjstm4yAi702tZvh8kvWEO0w
p=27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230198787362147064261141
q=27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230298787362147064261753
r = (p-1) * (q-1)
# reference: https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)
def modinv(e, r):
    g, x, y = egcd(e, r)
    return x % r
    
d = modinv(e, r)

private_key = RSA.construct((N, e, d))
file = open("private_key.pem", "wb")
file.write(private_key.export_key())
file.close()

## get csr:
# openssl req -new -key rootKey.key -out request.csr
# (TW / Taiwan / Taipei / NTU CNS / VIP / VIP / cns@csie.ntu.edu.tw)

## get root certificate:
# openssl req -x509 -new -key rootKey.key -out root.crt
# (TW / Taiwan / Taipei / NTU CNS / ROOT / ROOT / cns@csie.ntu.edu.tw)

## get eve.crt:
# openssl x509 -req -in request.csr -CA root.crt -CAkey rootKey.key -CAcreateserial -out eve.crt -days 365

## connect to server:
# openssl s_client -connect cns.csie.org:12345 -cert eve.crt -key rootKey.key

# username: Alice413
# password: dogsarecute
# Flag...plzzzzz...